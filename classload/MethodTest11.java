/*

方法在执行过程当中，在jvm中的内存是如何分配，如何变化的呢？
     1、方法只定义，不调用，是不会执行的，并且在jvm当中也不会给该方法分配运行所属的内存空间。
	 只有在调用这个方法的时候，才会动态的给这个方法分配所属的内存空间。
	 2、在jvm内存划分上有这样三块主要的内存空间：（当然除了这三块还有其他的内存空间）
	      *方法区
		  *堆区
		  *栈内存

	3、关于栈数据结构：
	    *栈：stack，是一种数据结构
		*数据结构反应的是数据的存储形态
		*数据结构是独立的学科，不属于任何变成语言的范畴，只不过大多数编程语言当中要是用数据结构。
		*做为程序员需要提前精通：数据结构，算法【计算机专业必修一门课程】
		*java程序员在不精通数据结构和算法的前提下，也可能进行java开发，因为有一套庞大的类库支撑，
		别人写好了，直接用【javase当中的集合章节使用了大量的数据结构】
        *常见的数据结构：
		 - 数组
		 - 队列
		 - 栈
		 - 链表
		 - 二叉树
		 - 哈希表/散列表
		 ......
		*

	4、方法代码片段在哪里?方法执行的时候执行过程的内存在哪里分配？
	   *方法代码片段属于.class字节码文件的一部分，字节码文件在类加载的时候，
	   将其方法放到了方法区当中，所以jvm的三块主要内存空间中方法区内存最先有
	   数据、存放了代码片段。

	   *代码片段虽然在方法区内存中只有一份，但是可以重复使用。
	   每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在
	   栈内存中分配。【栈内存中分配方法运行的所属内存空间】

	 5、方法在调用的瞬间，会给该方法分配独立的内存的空间，在栈中分配，此时发生压栈动作。
	 方法执行结束之后，给该方法分配的内存文件全部释放，此时发生弹栈动作。

	      *压栈：给方法分配内存
		  *弹栈：释放该方法的内存空间
	
	6、局部变量在运行阶段内存在栈中存储，在方法体中声明。
*/
public class MethodTest11
{
     public static void main(String[]args){
	 
	 
	 
	 }

}
